doctype html
html
  head
    title= title
    meta(name='viewport',content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0')
    link(rel="stylesheet", href="/bootstrap/css/bootstrap.min.css")
    link(rel="stylesheet", href="/css/style.min.css")
  body
    nav.navbar.navbar-expand.fixed-top.navbar-dark.justify-content-between
        .camSelectArea
            button.btn.btn-secondary#btnMobileSettings(type="button",data-bs-toggle="modal",data-bs-target="#modalMobileSettings") Settings
            button.btn.btn-link#btnWakeLock Keep Screen On


    section.viewport-frame
        .view#viewTally
            #viewTallyRenderer

    section.modal.fade#modalMobileSettings(ds-bs-backdrop="static",data-bs-keyboard="false",tabindex="-1",aria-labelledby="modalMobileSettingsBackdropLabel",aria-hidden="true")
        .modal-dialog.modal-dialog-scrollable 
            .modal-content.needs-validation#modalMobileSettingsForm 
                .modal-header 
                    h1.modal-title.fs-5#modalMobileSettingsBackdropLabel Settings 
                    button.btn-close(type="button",data-bs-dismiss="modal",aria-label="Close")
                .modal-body#modalMobileSettingsContent 
                    .row.mb-3
                        .form-group.col-sm
                            label.navbar-text(for="inputCameraSelection") Camera
                            select.form-control#inputCameraSelection
                    .row.mb-3
                        .form-group.col-sm
                            label.navbar-text(for="btnProgramColor") Program Color
                            input.form-control#btnProgramColor(type="color",value="#FF0000")
                        .form-group.col-sm
                            label.navbar-text(for="btnPreviewColor") Preview Color
                            input.form-control#btnPreviewColor(type="color",value="#00FF00")

                    .row.mb-3
                        .form-group.col-sm
                            .form-check.form-switch 
                                input.form-check-input#inputSettingsVibrate(type="checkbox",role="switch")
                                label.form-check-label(for="inputSettingsVibrate") Vibrate on "Program" (Android Only)
                .modal-footer 
                    button.btn.btn-primary(type="button",data-bs-dismiss="modal") OK
            
    script(src="/bootstrap/js/bootstrap.bundle.min.js")
    script(src="/socketio/socket.io.js")
    script(src="/jquery/jquery.min.js")
    script(src="/nosleep/NoSleep.min.js")
    script(src="/jscookie/js.cookie.js")
    script.
        var lastUpdate = {};
        var camSelection = window.location.hash.split('#')[1] || "ALL";
        var programColor = "#FF0000";
        var previewColor = "#00FF00";
        var noSleep = new NoSleep();
        var vibrating = false;
        var allowVibrate = false;

        function vibratePattern() {
            if (allowVibrate && !vibrating) {
                vibrating = true
                window.navigator.vibrate([300,80,300])
                setTimeout(() => {vibrating = false},1000)
            }
        }

        function updateTallyColor() {
            $('.tally').css('background', '#333333'); // Reset all to black first
            $(".tally[data-tally-state='preview']").css('background', getPreviewColor());
            $(".tally[data-tally-state='program']").css('background', getProgramColor());
            $('#btnProgramColor').val(getProgramColor());
            $('#btnPreviewColor').val(getPreviewColor());
        }

        function bindCameraButtons() {
            $('.tally-multi').click(function(cam) {
                var sid = $(this).data('sid');
                $('#inputCameraSelection').val(sid);
                $('#inputCameraSelection').change();
            });
            $('.tally-single').click(function(cam) {
                $('#inputCameraSelection').val("ALL");
                $('#inputCameraSelection').change();
            });
        }


        function updateTally() {
            $("#viewTallyRenderer").html('');
            $("#viewTallyRenderer").removeClass('viewSingleTally viewMultiTally');

            if (camSelection === "ALL") {
                if (lastUpdate && lastUpdate.availableCameras && lastUpdate.availableCameras.length > 0) {
                    $("#viewTallyRenderer").addClass('viewMultiTally');
                    $.each(lastUpdate.availableCameras, function(key, value) {
                        $("#viewTallyRenderer").append($('<div/>',{
                            class: "tally tally-multi",
                            'data-sid': value.id,
                            'data-cid': value.id,
                            'data-tally-state': (lastUpdate.programSourceIds.includes(parseInt(value.id))) ? 'program' : ((lastUpdate.previewSourceIds.includes(parseInt(value.id))) ? 'preview': 'inactive'),
                            'data-abbreviation': value.shortName,
                            'data-name': value.name
                        }))
                    });
                    $('.tally-multi').each(function(i, obj) {
                        $(obj).append('<span class="tallyCameraId">' + $(obj).attr('data-cid') + '</span>');
                        $(obj).append('<span class="tallyCameraLabel">' + $(obj).attr('data-abbreviation') + '</span>');
                    });
                    $("#viewTallyRenderer").append($('<div/>',{
                        class: "tally tally-multi tally-stream",
                        'data-sid': 'stream',
                        'data-cid': 'stream',
                        'data-tally-state': (lastUpdate.streamState) ? 'program' : 'inactive',
                        'data-abbreviation': 'ON AIR',
                        'data-name': 'Stream'
                    }))
                    $('.tally-stream').each(function(i, obj) {
                        $(obj).append('<span class="tallyCameraId small">' + $(obj).attr('data-abbreviation') + '</span>');
                        $(obj).append('<span class="tallyCameraLabel">' + $(obj).attr('data-name') + '</span>');
                    });
                }
            } else if (camSelection === "stream") {
                $("#viewTallyRenderer").addClass('viewSingleTally');
                $("#viewTallyRenderer").append($('<div/>',{
                    class: "tally tally-single",
                    'data-sid': 'stream',
                    'data-cid': 'stream',
                    'data-tally-state': (lastUpdate.streamState) ? 'program' : 'inactive',
                    'data-abbreviation': 'ON AIR',
                    'data-name': 'Stream'
                }))
                $('.tally-single').each(function(i, obj) {
                    $(obj).append('<span class="tallyCameraId small">' + $(obj).attr('data-abbreviation') + '</span>');
                    $(obj).append('<span class="tallyCameraLabel">' + $(obj).attr('data-name') + '</span>');
                });
            } else {
                $("#viewTallyRenderer").addClass('viewSingleTally');
                if (lastUpdate.programSourceIds.includes(parseInt(camSelection))) {
                    vibratePattern()
                }
                $.each(lastUpdate.availableCameras, function(key, value) {
                    if (camSelection == value.id) {
                        $("#viewTallyRenderer").append($('<div/>',{
                            class: "tally tally-single",
                            'data-sid': value.id,
                            'data-cid': value.id,
                            'data-tally-state': (lastUpdate.programSourceIds.includes(parseInt(value.id))) ? 'program' : ((lastUpdate.previewSourceIds.includes(parseInt(value.id))) ? 'preview': 'inactive'),
                            'data-abbreviation': value.shortName,
                            'data-name': value.name
                        }))
                    }
                });
                
                $('.tally-single').each(function(i, obj) {
                    $(obj).append('<span class="tallyCameraId">' + $(obj).attr('data-cid') + '</span>');
                    $(obj).append('<span class="tallyCameraLabel">' + $(obj).attr('data-abbreviation') + '</span>');
                });
            }

            updateTallyColor();
            bindCameraButtons();
        }
        function setCamera() {
            camSelection = $('#inputCameraSelection').val();
            window.location.hash = camSelection
            Cookies.set('inputCameraSelection', camSelection);
            updateTally();
        }
        function getCamera() {
            var camSelection = Cookies.set('inputCameraSelection');
            if (!camSelection) {
                camSelection = "ALL";
                Cookies.set('inputCameraSelection', camSelection);
            }
            return camSelection;
        }
        function setProgramColor(color) {
            Cookies.set('programColor', color);
            programColor = color;
            updateTallyColor();
        }
        function setPreviewColor(color) {
            Cookies.set('previewColor', color);
            previewColor = color;
            updateTallyColor();
        }
        function setVibrate() {
            Cookies.set('allowVibrate', $('#inputSettingsVibrate').prop('checked'))
            allowVibrate = $('#inputSettingsVibrate').prop('checked')
        }
        function getProgramColor() {
            var color = (Cookies.get('programColor')) ? Cookies.get('programColor') : programColor;
            return color;
        }
        function getPreviewColor() {
            var color = (Cookies.get('previewColor')) ? Cookies.get('previewColor') : previewColor;
            return color;
        }
        function getVibrate() {
            var vibrate = (Cookies.get('allowVibrate')) ? Cookies.get('allowVibrate') : allowVibrate;
            return vibrate;
        }

        $('#inputCameraSelection').change(() => { setCamera() })
        $('#inputSettingsVibrate').change(() => { setVibrate() })
        $('#btnProgramColor').change(() => { setProgramColor( $('#btnProgramColor').val() ); });
        $('#btnPreviewColor').change(() => { setPreviewColor( $('#btnPreviewColor').val() ); });
        $('#btnWakeLock').click(() => {noSleep.enable(); $('#btnWakeLock').hide()});

        $(function () {
            $('#inputSettingsVibrate').prop('checked', getVibrate())

            var socket = io();
            socket.on('connect', function() {
                socket.emit('capability', {
                    type: 'web',
                    id: 'anon',
                });
            });
            socket.on('update_tally', function(msg) {
                lastUpdate = msg;
                $('#inputCameraSelection').html('');
                $('#inputCameraSelection').append($('<option/>', {
                    value: "ALL",
                    text: "All Cameras",
                    selected: (camSelection != "ALL") ? false : true
                }));
                $('#inputCameraSelection').append($('<option/>', {
                    value: "stream",
                    text: "Streaming Status",
                    selected: (camSelection != "stream") ? false : true
                }));
                $.each(msg.availableCameras, function(key, value) {
                    $('#inputCameraSelection').append($('<option/>', {
                        value: value.id,
                        text: value.name + " (" + value.shortName + " - " + value.interface + ")",
                        selected: (camSelection == value.id) ? true : false
                    }));
                })
                updateTally();
            })
        });